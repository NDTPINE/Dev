//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QuanLyCuaHangApp.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class QLCuaHangAppEntities1 : DbContext
    {
        public QLCuaHangAppEntities1()
            : base("name=QLCuaHangAppEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Good> Goods { get; set; }
        public virtual DbSet<InputInfo> InputInfoes { get; set; }
        public virtual DbSet<Input> Inputs { get; set; }
        public virtual DbSet<OutputInfo> OutputInfoes { get; set; }
        public virtual DbSet<Output> Outputs { get; set; }
        public virtual DbSet<Staff> Staffs { get; set; }
        public virtual DbSet<Suplier> Supliers { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<v_ListInput> v_ListInput { get; set; }
        public virtual DbSet<v_ListOutput> v_ListOutput { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
    
        public virtual int Sp_Delete_Customer(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Delete_Customer", idParameter);
        }
    
        public virtual int Sp_Delete_Good(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Delete_Good", idParameter);
        }
    
        public virtual int Sp_Delete_Input(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Delete_Input", idParameter);
        }
    
        public virtual int Sp_Delete_InputInfo(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Delete_InputInfo", idParameter);
        }
    
        public virtual int Sp_Delete_Output(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Delete_Output", idParameter);
        }
    
        public virtual int Sp_Delete_OutputInfo(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Delete_OutputInfo", idParameter);
        }
    
        public virtual int Sp_Delete_Staff(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Delete_Staff", idParameter);
        }
    
        public virtual int Sp_Delete_Suplier(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Delete_Suplier", idParameter);
        }
    
        public virtual int Sp_Insert_Customer(string customer, string nameCus, string adress, string phone, string email)
        {
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var nameCusParameter = nameCus != null ?
                new ObjectParameter("NameCus", nameCus) :
                new ObjectParameter("NameCus", typeof(string));
    
            var adressParameter = adress != null ?
                new ObjectParameter("Adress", adress) :
                new ObjectParameter("Adress", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Insert_Customer", customerParameter, nameCusParameter, adressParameter, phoneParameter, emailParameter);
        }
    
        public virtual int Sp_Insert_Good(Nullable<int> id, string good, string nameGoo, string producer, Nullable<int> numbers, string warranty, string unit, string statuss)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var goodParameter = good != null ?
                new ObjectParameter("Good", good) :
                new ObjectParameter("Good", typeof(string));
    
            var nameGooParameter = nameGoo != null ?
                new ObjectParameter("NameGoo", nameGoo) :
                new ObjectParameter("NameGoo", typeof(string));
    
            var producerParameter = producer != null ?
                new ObjectParameter("Producer", producer) :
                new ObjectParameter("Producer", typeof(string));
    
            var numbersParameter = numbers.HasValue ?
                new ObjectParameter("Numbers", numbers) :
                new ObjectParameter("Numbers", typeof(int));
    
            var warrantyParameter = warranty != null ?
                new ObjectParameter("Warranty", warranty) :
                new ObjectParameter("Warranty", typeof(string));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var statussParameter = statuss != null ?
                new ObjectParameter("Statuss", statuss) :
                new ObjectParameter("Statuss", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Insert_Good", idParameter, goodParameter, nameGooParameter, producerParameter, numbersParameter, warrantyParameter, unitParameter, statussParameter);
        }
    
        public virtual int Sp_Insert_Input(Nullable<int> id, string inputCode, Nullable<System.DateTime> dateIn, string idStaffs, string idSupliers)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var inputCodeParameter = inputCode != null ?
                new ObjectParameter("InputCode", inputCode) :
                new ObjectParameter("InputCode", typeof(string));
    
            var dateInParameter = dateIn.HasValue ?
                new ObjectParameter("DateIn", dateIn) :
                new ObjectParameter("DateIn", typeof(System.DateTime));
    
            var idStaffsParameter = idStaffs != null ?
                new ObjectParameter("IdStaffs", idStaffs) :
                new ObjectParameter("IdStaffs", typeof(string));
    
            var idSupliersParameter = idSupliers != null ?
                new ObjectParameter("IdSupliers", idSupliers) :
                new ObjectParameter("IdSupliers", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Insert_Input", idParameter, inputCodeParameter, dateInParameter, idStaffsParameter, idSupliersParameter);
        }
    
        public virtual int Sp_Insert_InputInfo(Nullable<int> id, Nullable<int> idInput, Nullable<int> idGood, Nullable<int> numberInput, Nullable<float> pricesInput, Nullable<float> tax)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var idInputParameter = idInput.HasValue ?
                new ObjectParameter("IdInput", idInput) :
                new ObjectParameter("IdInput", typeof(int));
    
            var idGoodParameter = idGood.HasValue ?
                new ObjectParameter("IdGood", idGood) :
                new ObjectParameter("IdGood", typeof(int));
    
            var numberInputParameter = numberInput.HasValue ?
                new ObjectParameter("NumberInput", numberInput) :
                new ObjectParameter("NumberInput", typeof(int));
    
            var pricesInputParameter = pricesInput.HasValue ?
                new ObjectParameter("PricesInput", pricesInput) :
                new ObjectParameter("PricesInput", typeof(float));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(float));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Insert_InputInfo", idParameter, idInputParameter, idGoodParameter, numberInputParameter, pricesInputParameter, taxParameter);
        }
    
        public virtual int Sp_Insert_Output(Nullable<int> id, string outputCode, Nullable<System.DateTime> dateOut, string idStaffs, string idCustomers)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var outputCodeParameter = outputCode != null ?
                new ObjectParameter("OutputCode", outputCode) :
                new ObjectParameter("OutputCode", typeof(string));
    
            var dateOutParameter = dateOut.HasValue ?
                new ObjectParameter("DateOut", dateOut) :
                new ObjectParameter("DateOut", typeof(System.DateTime));
    
            var idStaffsParameter = idStaffs != null ?
                new ObjectParameter("IdStaffs", idStaffs) :
                new ObjectParameter("IdStaffs", typeof(string));
    
            var idCustomersParameter = idCustomers != null ?
                new ObjectParameter("IdCustomers", idCustomers) :
                new ObjectParameter("IdCustomers", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Insert_Output", idParameter, outputCodeParameter, dateOutParameter, idStaffsParameter, idCustomersParameter);
        }
    
        public virtual int Sp_Insert_OutputInfo(Nullable<int> id, Nullable<int> idOutput, Nullable<int> idGood, Nullable<int> numberOutput, Nullable<float> pricesOutput, Nullable<float> tax)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var idOutputParameter = idOutput.HasValue ?
                new ObjectParameter("IdOutput", idOutput) :
                new ObjectParameter("IdOutput", typeof(int));
    
            var idGoodParameter = idGood.HasValue ?
                new ObjectParameter("IdGood", idGood) :
                new ObjectParameter("IdGood", typeof(int));
    
            var numberOutputParameter = numberOutput.HasValue ?
                new ObjectParameter("NumberOutput", numberOutput) :
                new ObjectParameter("NumberOutput", typeof(int));
    
            var pricesOutputParameter = pricesOutput.HasValue ?
                new ObjectParameter("PricesOutput", pricesOutput) :
                new ObjectParameter("PricesOutput", typeof(float));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(float));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Insert_OutputInfo", idParameter, idOutputParameter, idGoodParameter, numberOutputParameter, pricesOutputParameter, taxParameter);
        }
    
        public virtual int Sp_Insert_Staff(Nullable<int> id, string staff, string nameSta, Nullable<int> yearBirth, string sex, string addressSta, string phone, string position, string salary)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var staffParameter = staff != null ?
                new ObjectParameter("Staff", staff) :
                new ObjectParameter("Staff", typeof(string));
    
            var nameStaParameter = nameSta != null ?
                new ObjectParameter("NameSta", nameSta) :
                new ObjectParameter("NameSta", typeof(string));
    
            var yearBirthParameter = yearBirth.HasValue ?
                new ObjectParameter("YearBirth", yearBirth) :
                new ObjectParameter("YearBirth", typeof(int));
    
            var sexParameter = sex != null ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(string));
    
            var addressStaParameter = addressSta != null ?
                new ObjectParameter("AddressSta", addressSta) :
                new ObjectParameter("AddressSta", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            var salaryParameter = salary != null ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Insert_Staff", idParameter, staffParameter, nameStaParameter, yearBirthParameter, sexParameter, addressStaParameter, phoneParameter, positionParameter, salaryParameter);
        }
    
        public virtual int Sp_Update_Customer(Nullable<int> id, string customer, string nameCus, string adress, string phone, string email)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var nameCusParameter = nameCus != null ?
                new ObjectParameter("NameCus", nameCus) :
                new ObjectParameter("NameCus", typeof(string));
    
            var adressParameter = adress != null ?
                new ObjectParameter("Adress", adress) :
                new ObjectParameter("Adress", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_Customer", idParameter, customerParameter, nameCusParameter, adressParameter, phoneParameter, emailParameter);
        }
    
        public virtual int Sp_Update_Good(Nullable<int> id, string good, string nameGoo, string producer, Nullable<int> numbers, string warranty, string unit, string statuss)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var goodParameter = good != null ?
                new ObjectParameter("Good", good) :
                new ObjectParameter("Good", typeof(string));
    
            var nameGooParameter = nameGoo != null ?
                new ObjectParameter("NameGoo", nameGoo) :
                new ObjectParameter("NameGoo", typeof(string));
    
            var producerParameter = producer != null ?
                new ObjectParameter("Producer", producer) :
                new ObjectParameter("Producer", typeof(string));
    
            var numbersParameter = numbers.HasValue ?
                new ObjectParameter("Numbers", numbers) :
                new ObjectParameter("Numbers", typeof(int));
    
            var warrantyParameter = warranty != null ?
                new ObjectParameter("Warranty", warranty) :
                new ObjectParameter("Warranty", typeof(string));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var statussParameter = statuss != null ?
                new ObjectParameter("Statuss", statuss) :
                new ObjectParameter("Statuss", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_Good", idParameter, goodParameter, nameGooParameter, producerParameter, numbersParameter, warrantyParameter, unitParameter, statussParameter);
        }
    
        public virtual int Sp_Update_Input(Nullable<int> id, string inputCode, Nullable<System.DateTime> dateIn, string idStaffs, string idSupliers)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var inputCodeParameter = inputCode != null ?
                new ObjectParameter("InputCode", inputCode) :
                new ObjectParameter("InputCode", typeof(string));
    
            var dateInParameter = dateIn.HasValue ?
                new ObjectParameter("DateIn", dateIn) :
                new ObjectParameter("DateIn", typeof(System.DateTime));
    
            var idStaffsParameter = idStaffs != null ?
                new ObjectParameter("IdStaffs", idStaffs) :
                new ObjectParameter("IdStaffs", typeof(string));
    
            var idSupliersParameter = idSupliers != null ?
                new ObjectParameter("IdSupliers", idSupliers) :
                new ObjectParameter("IdSupliers", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_Input", idParameter, inputCodeParameter, dateInParameter, idStaffsParameter, idSupliersParameter);
        }
    
        public virtual int Sp_Update_InputInfo(Nullable<int> id, Nullable<int> idInput, Nullable<int> idGood, Nullable<int> numberInput, Nullable<float> pricesInput, Nullable<float> tax)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var idInputParameter = idInput.HasValue ?
                new ObjectParameter("IdInput", idInput) :
                new ObjectParameter("IdInput", typeof(int));
    
            var idGoodParameter = idGood.HasValue ?
                new ObjectParameter("IdGood", idGood) :
                new ObjectParameter("IdGood", typeof(int));
    
            var numberInputParameter = numberInput.HasValue ?
                new ObjectParameter("NumberInput", numberInput) :
                new ObjectParameter("NumberInput", typeof(int));
    
            var pricesInputParameter = pricesInput.HasValue ?
                new ObjectParameter("PricesInput", pricesInput) :
                new ObjectParameter("PricesInput", typeof(float));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(float));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_InputInfo", idParameter, idInputParameter, idGoodParameter, numberInputParameter, pricesInputParameter, taxParameter);
        }
    
        public virtual int Sp_Update_Output(Nullable<int> id, string outputCode, Nullable<System.DateTime> dateOut, string idStaffs, string idCustomers)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var outputCodeParameter = outputCode != null ?
                new ObjectParameter("OutputCode", outputCode) :
                new ObjectParameter("OutputCode", typeof(string));
    
            var dateOutParameter = dateOut.HasValue ?
                new ObjectParameter("DateOut", dateOut) :
                new ObjectParameter("DateOut", typeof(System.DateTime));
    
            var idStaffsParameter = idStaffs != null ?
                new ObjectParameter("IdStaffs", idStaffs) :
                new ObjectParameter("IdStaffs", typeof(string));
    
            var idCustomersParameter = idCustomers != null ?
                new ObjectParameter("IdCustomers", idCustomers) :
                new ObjectParameter("IdCustomers", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_Output", idParameter, outputCodeParameter, dateOutParameter, idStaffsParameter, idCustomersParameter);
        }
    
        public virtual int Sp_Update_OutputInfo(Nullable<int> id, Nullable<int> idOutput, Nullable<int> idGood, Nullable<int> numberOutput, Nullable<float> pricesOutput, Nullable<float> tax)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var idOutputParameter = idOutput.HasValue ?
                new ObjectParameter("IdOutput", idOutput) :
                new ObjectParameter("IdOutput", typeof(int));
    
            var idGoodParameter = idGood.HasValue ?
                new ObjectParameter("IdGood", idGood) :
                new ObjectParameter("IdGood", typeof(int));
    
            var numberOutputParameter = numberOutput.HasValue ?
                new ObjectParameter("NumberOutput", numberOutput) :
                new ObjectParameter("NumberOutput", typeof(int));
    
            var pricesOutputParameter = pricesOutput.HasValue ?
                new ObjectParameter("PricesOutput", pricesOutput) :
                new ObjectParameter("PricesOutput", typeof(float));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(float));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_OutputInfo", idParameter, idOutputParameter, idGoodParameter, numberOutputParameter, pricesOutputParameter, taxParameter);
        }
    
        public virtual int Sp_Update_Staff(Nullable<int> id, string staff, string nameSta, Nullable<int> yearBirth, string sex, string addressSta, string phone, string position, Nullable<int> salary)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var staffParameter = staff != null ?
                new ObjectParameter("Staff", staff) :
                new ObjectParameter("Staff", typeof(string));
    
            var nameStaParameter = nameSta != null ?
                new ObjectParameter("NameSta", nameSta) :
                new ObjectParameter("NameSta", typeof(string));
    
            var yearBirthParameter = yearBirth.HasValue ?
                new ObjectParameter("YearBirth", yearBirth) :
                new ObjectParameter("YearBirth", typeof(int));
    
            var sexParameter = sex != null ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(string));
    
            var addressStaParameter = addressSta != null ?
                new ObjectParameter("AddressSta", addressSta) :
                new ObjectParameter("AddressSta", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_Staff", idParameter, staffParameter, nameStaParameter, yearBirthParameter, sexParameter, addressStaParameter, phoneParameter, positionParameter, salaryParameter);
        }
    
        public virtual int Sp_Update_Suplier(Nullable<int> id, string suplier, string nameSup, string addressSup, string phone, string email)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var suplierParameter = suplier != null ?
                new ObjectParameter("Suplier", suplier) :
                new ObjectParameter("Suplier", typeof(string));
    
            var nameSupParameter = nameSup != null ?
                new ObjectParameter("NameSup", nameSup) :
                new ObjectParameter("NameSup", typeof(string));
    
            var addressSupParameter = addressSup != null ?
                new ObjectParameter("AddressSup", addressSup) :
                new ObjectParameter("AddressSup", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_Suplier", idParameter, suplierParameter, nameSupParameter, addressSupParameter, phoneParameter, emailParameter);
        }
    
        public virtual int Sp_ChangePass_User(string oldPass, string newPass, string repeatPass, string userName)
        {
            var oldPassParameter = oldPass != null ?
                new ObjectParameter("OldPass", oldPass) :
                new ObjectParameter("OldPass", typeof(string));
    
            var newPassParameter = newPass != null ?
                new ObjectParameter("NewPass", newPass) :
                new ObjectParameter("NewPass", typeof(string));
    
            var repeatPassParameter = repeatPass != null ?
                new ObjectParameter("RepeatPass", repeatPass) :
                new ObjectParameter("RepeatPass", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_ChangePass_User", oldPassParameter, newPassParameter, repeatPassParameter, userNameParameter);
        }
    }
}
